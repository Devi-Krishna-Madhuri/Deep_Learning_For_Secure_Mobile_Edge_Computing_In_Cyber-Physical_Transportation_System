# -*- coding: utf-8 -*-
"""05_RNN_model_training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11yaz-O-QfT7j5B5alk8itkLEg2ewgXIN
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, SimpleRNN, LSTM
from tensorflow.keras.utils import to_categorical
import joblib
import matplotlib.pyplot as plt

# Load preprocessed data
X = np.load("X.npy")
y = np.load("y.npy")

# Convert target to categorical (one-hot encoding)
y = to_categorical(y)

X = X.reshape(X.shape[0], X.shape[1], 1)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define RNN model
model = Sequential([
    SimpleRNN(64, activation='relu', return_sequences=True, input_shape=(X_train.shape[1], 1)),  # First RNN layer
    Dropout(0.3),

    SimpleRNN(32, activation='relu', return_sequences=False),  # Second RNN layer
    Dropout(0.3),

    Dense(128, activation='relu'),
    Dropout(0.3),

    Dense(y_train.shape[1], activation='softmax')  # Output layer
])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

# Train the model
history = model.fit(X_train, y_train,
                    validation_data=(X_test, y_test),
                    epochs=18,
                    batch_size=32)

# Save the model
model.save("rnn_network_attack_classifier.h5")
print("Model saved as cnn_network_attack_classifier.h5")

# Save training history
np.save("rnn_training_history.npy", history.history)
print("Training history saved as training_history.npy")