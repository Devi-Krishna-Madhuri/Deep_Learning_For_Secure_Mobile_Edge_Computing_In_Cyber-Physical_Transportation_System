# -*- coding: utf-8 -*-
"""02. Data_Preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1suAVZ7ZTKL18MvK1ybH54qxRdzmcaKHS

#Importing Libraries
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Conv1D, MaxPooling1D, Flatten
from tensorflow.keras.utils import to_categorical
import joblib

"""#Data Preprocessing

**Load the dataset**
"""

# Load dataset
df = pd.read_csv("balanced_synthetic_network_data.csv")

"""**Check the shape of the dataset**"""

df.shape

"""**Check the columns**"""

df.columns

"""**Check for null values**"""

df.isnull().sum()

"""there is no null values in our dataset

**Check for Duplicate values**
"""

print(f"Duplicate Rows: {df.duplicated().sum()}")

"""there is no duplicate values also in our dataset"""

target_feature = "Attack_Type"
print(df[target_feature].value_counts())

"""**Label Encoding**"""

# Encode categorical features and target
categorical_features = ["Device_ID", "Protocol_Type", "IP_Flag", "Session_Status"]
target_feature = "Attack_Type"

# Label encode categorical features
label_encoders = {}
for col in categorical_features + [target_feature]:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

"""**Correlation Analysis**"""

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.show()

plt.savefig('correlation_heatmap.png')

"""**Separate features and target**"""

# Separate features and target
X = df.drop(columns=[target_feature])
y = df[target_feature]

"""**Scaling**"""

# Scale numerical features
scaler = StandardScaler()
X = scaler.fit_transform(X)

joblib.dump(scaler, "scaler.pkl")
print("Scaler saved as scaler.pkl")

# Save LabelEncoders
joblib.dump(label_encoders, "label_encoders.pkl")
print("LabelEncoders saved as label_encoders.pkl")

# Save preprocessed data
np.save("X.npy", X)
np.save("y.npy", y)