# -*- coding: utf-8 -*-
"""04_CNN_Model_Evaluation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wKnrGnw7-_odRT3tXyXq4m7mF49zCoaM
"""

# Import necessary libraries
import numpy as np
import joblib
import tensorflow as tf
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
from tensorflow.keras.utils import to_categorical

# Load preprocessed data
X = np.load("X.npy")
y = np.load("y.npy")

# Load LabelEncoders & StandardScaler
label_encoders = joblib.load("label_encoders.pkl")
scaler = joblib.load("scaler.pkl")

# Load trained CNN model
model = tf.keras.models.load_model("cnn_network_attack_classifier.h5")

# Reshape input for CNN
X = X.reshape((X.shape[0], X.shape[1], 1))

# Convert target to categorical (one-hot encoding)
y = to_categorical(y)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Evaluate the model on the test set
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test Loss: {test_loss}")
print(f"Test Accuracy: {test_accuracy}")

# Evaluate the model on the training set
train_loss, train_accuracy = model.evaluate(X_train, y_train)
print(f"Train Loss: {train_loss}")
print(f"Train Accuracy: {train_accuracy}")

# Predict on test data
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true_classes = np.argmax(y_test, axis=1)

attack_types = [ 'DoS', 'Normal','Phishing','Spoofing ']
print("Classification Report:")
classification_rep = classification_report(y_true_classes, y_pred_classes, target_names=attack_types)
print(classification_rep)

# Confusion Matrix
cm = confusion_matrix(y_true_classes, y_pred_classes)
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=attack_types, yticklabels=attack_types)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

# Load training history (optional)
history = np.load("cnn_training_history.npy", allow_pickle=True).item()

# Plot training history
plt.figure(figsize=(12, 6))
plt.plot(history['accuracy'], label='Training Accuracy')
plt.plot(history['val_accuracy'], label='Validation Accuracy')
plt.title('CNN Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(history['loss'], label='Training Loss')
plt.plot(history['val_loss'], label='Validation Loss')
plt.title('CNN Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Save metrics to a text file
with open("metrics.txt", "w") as f:
    f.write("Test Loss: {}\n".format(test_loss))
    f.write("Test Accuracy: {}\n".format(test_accuracy))
    f.write("Train Loss: {}\n".format(train_loss))
    f.write("Train Accuracy: {}\n".format(train_accuracy))
    f.write("\nClassification Report:\n")
    f.write(classification_rep)

print("Metrics saved to metrics.txt")

